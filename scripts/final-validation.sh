#!/bin/bash

echo "üéâ VALIDACI√ìN FINAL - PROYECTO BILLPAY"
echo "====================================="

# Verificar Backstage
echo "üé≠ Verificando Backstage..."
if curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo "  ‚úÖ Backstage corriendo en http://localhost:3000"
else
    echo "  ‚ùå Backstage NO est√° corriendo"
fi

# Verificar template
echo "üéØ Verificando template..."
TEMPLATE_PATH="/home/giovanemere/periferia/billpay/repositories/templates_backstage/billpay-complete-stack/template.yaml"
if [ -f "$TEMPLATE_PATH" ]; then
    echo "  ‚úÖ Template encontrado"
    
    # Verificar par√°metros clave
    if grep -q "cloud_provider" "$TEMPLATE_PATH" && grep -q "region" "$TEMPLATE_PATH"; then
        echo "  ‚úÖ Par√°metros multi-cloud configurados"
    else
        echo "  ‚ùå Par√°metros multi-cloud NO configurados"
    fi
else
    echo "  ‚ùå Template NO encontrado"
fi

# Verificar workflows centralizados
echo "üîÑ Verificando workflows centralizados..."
WORKFLOWS_PATH="/home/giovanemere/periferia/billpay/repositories/ia-ops-iac/.github/workflows"
if [ -d "$WORKFLOWS_PATH" ]; then
    echo "  ‚úÖ Directorio de workflows encontrado"
    
    # Verificar workflows espec√≠ficos
    if [ -f "$WORKFLOWS_PATH/infrastructure.yml" ]; then
        echo "  ‚úÖ infrastructure.yml encontrado"
    fi
    if [ -f "$WORKFLOWS_PATH/deploy-service.yml" ]; then
        echo "  ‚úÖ deploy-service.yml encontrado"
    fi
    if [ -f "$WORKFLOWS_PATH/deploy-complete.yml" ]; then
        echo "  ‚úÖ deploy-complete.yml encontrado"
    fi
else
    echo "  ‚ùå Directorio de workflows NO encontrado"
fi

# Verificar Dockerfiles
echo "üê≥ Verificando Dockerfiles..."
REPOS=("poc-billpay-back" "poc-billpay-front-a" "poc-billpay-front-b" "poc-billpay-front-feature-flags")
for repo in "${REPOS[@]}"; do
    DOCKERFILE_PATH="/home/giovanemere/periferia/billpay/repositories/$repo/Dockerfile"
    if [ -f "$DOCKERFILE_PATH" ]; then
        echo "  ‚úÖ Dockerfile en $repo"
    else
        echo "  ‚ùå Dockerfile NO encontrado en $repo"
    fi
done

# Verificar infraestructura
echo "üèóÔ∏è Verificando infraestructura..."
INFRA_PATH="/home/giovanemere/periferia/billpay/infrastructure/terragrunt/environments/dev"
if [ -d "$INFRA_PATH" ]; then
    echo "  ‚úÖ Configuraci√≥n Terragrunt encontrada"
    
    if [ -f "$INFRA_PATH/terragrunt.hcl" ]; then
        echo "  ‚úÖ terragrunt.hcl configurado"
    fi
else
    echo "  ‚ùå Configuraci√≥n Terragrunt NO encontrada"
fi

# Verificar documentaci√≥n
echo "üìö Verificando documentaci√≥n..."
DOCS=("README.md" "docs/PROJECT_PROGRESS.md" "docs/WORKFLOWS.md" "docs/BACKSTAGE_USAGE.md")
for doc in "${DOCS[@]}"; do
    DOC_PATH="/home/giovanemere/periferia/billpay/$doc"
    if [ -f "$DOC_PATH" ]; then
        echo "  ‚úÖ $doc encontrado"
    else
        echo "  ‚ùå $doc NO encontrado"
    fi
done

# Verificar API documentation
echo "üìñ Verificando API docs..."
API_SPEC="/home/giovanemere/periferia/billpay/repositories/poc-billpay-back/docs/api-spec.yaml"
if [ -f "$API_SPEC" ]; then
    echo "  ‚úÖ API specification encontrada"
else
    echo "  ‚ùå API specification NO encontrada"
fi

echo ""
echo "üéØ RESUMEN DE VALIDACI√ìN"
echo "======================="

# Calcular progreso
TOTAL_CHECKS=20
PASSED_CHECKS=0

# Contar checks pasados (simplificado)
if curl -s http://localhost:3000 > /dev/null 2>&1; then ((PASSED_CHECKS++)); fi
if [ -f "$TEMPLATE_PATH" ]; then ((PASSED_CHECKS++)); fi
if [ -d "$WORKFLOWS_PATH" ]; then ((PASSED_CHECKS++)); fi
for repo in "${REPOS[@]}"; do
    if [ -f "/home/giovanemere/periferia/billpay/repositories/$repo/Dockerfile" ]; then
        ((PASSED_CHECKS++))
    fi
done
for doc in "${DOCS[@]}"; do
    if [ -f "/home/giovanemere/periferia/billpay/$doc" ]; then
        ((PASSED_CHECKS++))
    fi
done

PERCENTAGE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

echo "üìä Progreso: $PASSED_CHECKS/$TOTAL_CHECKS checks pasados ($PERCENTAGE%)"

if [ $PERCENTAGE -ge 90 ]; then
    echo "üéâ PROYECTO COMPLETADO EXITOSAMENTE"
    echo "=================================="
    echo ""
    echo "‚úÖ Todas las funcionalidades principales est√°n operativas"
    echo "‚úÖ Template de Backstage listo para usar"
    echo "‚úÖ Workflows centralizados configurados"
    echo "‚úÖ Documentaci√≥n completa"
    echo ""
    echo "üöÄ LISTO PARA DEMO:"
    echo "1. Abrir: http://localhost:3000"
    echo "2. Create ‚Üí 'BillPay Complete Stack Multi-Cloud'"
    echo "3. Configurar y desplegar"
    echo ""
    echo "üéØ DEVELOPER EXPERIENCE ALCANZADO:"
    echo "- 1-click deployment ‚úÖ"
    echo "- Multi-cloud support ‚úÖ"
    echo "- Workflows centralizados ‚úÖ"
    echo "- Documentaci√≥n autom√°tica ‚úÖ"
elif [ $PERCENTAGE -ge 70 ]; then
    echo "‚ö†Ô∏è PROYECTO MAYORMENTE COMPLETO"
    echo "Algunos componentes menores necesitan atenci√≥n"
else
    echo "‚ùå PROYECTO NECESITA M√ÅS TRABAJO"
    echo "Varios componentes cr√≠ticos faltan"
fi

echo ""
echo "üìã PR√ìXIMOS PASOS:"
echo "1. Probar template en Backstage"
echo "2. Validar deploy completo"
echo "3. Documentar cualquier issue encontrado"
